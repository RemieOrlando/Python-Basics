#duplicate values are ignored in sets
thisset = {"apple", "banana", "cherry", "apple"}

print(thisset)

#add items
thisset = {"apple", "banana", "cherry"}

thisset.add("orange")

print(thisset)

#add sets (Any iterable)
thisset = {"apple", "banana", "cherry"}
tropical = {"pineapple", "mango", "papaya"}
mylist = ["kiwi", "orange"]

thisset.update(tropical, mylist)

print(thisset)

#remove set item (one can use remove() or discard()
thisset = {"apple", "banana", "cherry"}

thisset.remove("banana")

print(thisset)

#pop() removes a random item
thisset = {"apple", "banana", "cherry"}

x = thisset.pop()

print(x)

print(thisset)

#clear() empties the set
thisset = {"apple", "banana", "cherry"}

thisset.clear()

print(thisset)

#looping sets
thisset = {"apple", "banana", "cherry"}

for x in thisset:
  print(x)
  
#joining two sets
set1 = {"a", "b" , "c"}
set2 = {1, 2, 3}

set3 = set1.union(set2)
print(set3)

#The intersection_update() method will keep only the items that are present in both sets.
x = {"apple", "banana", "cherry"}
y = {"google", "microsoft", "apple"}

x.intersection_update(y)

print(x)

#The symmetric_difference_update() method will keep only the elements that are NOT present in both sets.
x = {"apple", "banana", "cherry"}
y = {"google", "microsoft", "apple"}

z = x.symmetric_difference_update(y)

print(x)

#adding a new item in the dictionary
car = {
"brand": "Ford",
"model": "Mustang",
"year": 1964
}

x = car.keys()

print(x) #before the change

car["color"] = "white"

print(x) #after the change

#value list gets updated as well after changes
car = {
"brand": "Ford",
"model": "Mustang",
"year": 1964
}

x = car.values()

print(x) #before the change

car["year"] = 2020

print(x) #after the change

#check if key exists
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
if "model" in thisdict:
  print("\nYes, 'model' is one of the keys in the thisdict dictionary")

#changing values in a dictionary
thisdict =	{
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}

thisdict["year"] = 2018

print(thisdict)

#updating dictionary
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.update({"year": 2020})

#removing dictionary items
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.pop("model")
print(thisdict)

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.popitem()
print(thisdict)

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.clear()
print(thisdict)

#print all key names
thisdict =	{
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
for x in thisdict:
  print(x)

#print all values
thisdict =	{
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
for x in thisdict:
  print(thisdict[x])

#print keys and values
thisdict =	{
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
for x, y in thisdict.items():
  print(x, y)

#copy a dictionary
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
mydict = thisdict.copy()
print(mydict)

#nested dictionaries
child1 = {
  "name" : "Emil",
  "year" : 2004
}
child2 = {
  "name" : "Tobias",
  "year" : 2007
}
child3 = {
  "name" : "Linus",
  "year" : 2011
}

myfamily = {
  "child1" : child1,
  "child2" : child2,
  "child3" : child3
}

print(myfamily)

#Python Conditions and If statements
a = 33
b = 200
if b > a:
  print("\nb is greater than a")

a = 33
b = 33
if b > a:
  print("\nb is greater than a")
elif a == b:
  print("\na and b are equal")


a = 200
b = 33
if b > a:
  print("\nb is greater than a")
elif a == b:
  print("\na and b are equal")
else:
  print("\na is greater than b")

a = 200
b = 33
c = 500
if a > b and c > a:
  print("\nBoth conditions are True")

a = 200
b = 33
c = 500
if a > b or a > c:
  print("\nAt least one of the conditions is True")

a = 33
b = 200
if not a > b:
  print("\na is NOT greater than b")

x = 41

if x > 10:
  print("Above ten,")
  if x > 20:
    print("\nand also above 20!")
  else:
    print("\nbut not above 20.")

#To avoid getting an error, pass statement is used when an if statemnt has no content
a = 33
b = 200

if b > a:
  pass

#while loops
i = 1
while i < 6:
  print(i)
  i += 1

#while loops with The break Statement
i = 1
while i < 6:
  print(i)
  if i == 3:
    break
  i += 1

#while loops with the continue statement
i = 0
while i < 6:
  i += 1
  if i == 3:
    continue
  print(i)
#Note that number 3 is missing in the result

#else statement
i = 1
while i < 6:
  print(i)
  i += 1
else:
  print("\ni is no longer less than 6")

#For loops
fruits = ["apple", "banana", "cherry"]
for x in fruits:
  print(x)

#string loop
for x in "banana":
  print(x)

#break statement
fruits = ["apple", "banana", "cherry"]
for x in fruits:
  print(x)
  if x == "banana":
    break

#continue statement
fruits = ["apple", "banana", "cherry"]
for x in fruits:
  if x == "banana":
    continue
  print(x)

#range () function
for x in range(6):
  print(x)
  
for x in range(2, 6):
  print(x)
  
for x in range(2, 30, 3):
  print(x)

#else statement
for x in range(6):
  print(x)
else:
  print("\nFinally finished!")
  
for x in range(6):
  if x == 3: break
  print(x)
else:
  print("\nFinally finished!")

#If the loop breaks, the else block is not executed.

#nested loop
paintjob = ["chrome", "matte", "shiny"]
cars = ["mercedes", "jaguar", "BMW"] 

for x in paintjob:
 for y in cars:
  print (x,y)

for x in [0, 1, 2]:
  pass
# having an empty for loop like this, would raise an error without the pass statement

#calling functions
def my_function():
  print("\nHello from a function")

my_function()

#arguments in functions
def my_function(fname):
  print(fname + " Walker")

my_function("Edith")
my_function("Thomas")
my_function("Liam")

def my_function(fname, lname):
  print(fname + " " + lname)

my_function("Edith", "Walker")

#arbitrary arguments
def my_function(*kids):
  print("\nThe youngest child is " + kids[2])

my_function("Edith", "Thomas", "Liam")

#Keyword Arguments
def my_function(child3, child2, child1):
  print("\nThe youngest child is " + child3)

  my_function(child1 = "Edith", child2 = "Thomas", child3 = "Liam")

#Keyword arbitrary arguments
def my_function(**kid):
  print("\nHis last name is " + kid["lname"])

my_function(fname = "Thomas", lname = "Walker")

#default parameter value
def my_function(country = "Norway"):
  print("\nI am from " + country)

my_function("Sweden")
my_function("India")
my_function()
my_function("Brazil")

#Passing a List as an Argument
def my_function(food):
  for x in food:
    print(x)

fruits = ["apple", "banana", "cherry"]

my_function(fruits)

#Return Values
def my_function(x):
  return 5 * x

print(my_function(3))
print(my_function(5))
print(my_function(9))

#lamda function (syntax : lambda arguments : expression)
x = lambda a : a + 10
print(x(5))

def myfunc(n):
  return lambda a : a * n

mydoubler = myfunc(2)
mytripler = myfunc(3)

print(mydoubler(11))

#Create Class and Object
class MyClass:
  x = 5

p1 = MyClass()
print(p1.x)

#__init__() function
class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

p1 = Person("John", 36)

print(p1.name)
print(p1.age)

#__str__() function
class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def __str__(self):
    return f"{self.name}({self.age})"    

p1 = Person("John", 36)

print(p1)

#self parameter
class Person:
  def __init__(mysillyobject, name, age):
    mysillyobject.name = name
    mysillyobject.age = age

  def myfunc(abc):
    print("Hello my name is " + abc.name)

p1 = Person("John", 36)
p1.myfunc()

#modify object properties
class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def myfunc(self):
    print("Hello my name is " + self.name)

p1 = Person("John", 36)

p1.age = 40

print(p1.age)
